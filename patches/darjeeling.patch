diff --git a/src/darjeeling/cli/__init__.py b/src/darjeeling/cli/__init__.py
index ccb527c..f5cda0c 100644
--- a/src/darjeeling/cli/__init__.py
+++ b/src/darjeeling/cli/__init__.py
@@ -88,7 +88,7 @@ class BaseController(cement.Controller):
     def _default_log_filename(self) -> str:
         # find all log file numbers that have been used in this directory
         used_numbers = [int(s.rpartition('.')[-1])
-                        for s in glob.glob('darjeeling.log.*')]
+                        for s in glob.glob('darjeeling.log.[0-9]*')]
 
         if not used_numbers:
             return os.path.join(os.getcwd(), 'darjeeling.log.0')
diff --git a/src/darjeeling/coverage/gcov.py b/src/darjeeling/coverage/gcov.py
index 757c34f..a5c2f79 100644
--- a/src/darjeeling/coverage/gcov.py
+++ b/src/darjeeling/coverage/gcov.py
@@ -32,8 +32,8 @@ _INSTRUMENTATION = (
     "  if(sig != SIGUSR1 && sig != SIGUSR2)\n"
     "    exit(1);\n"
     "}\n"
-    "void darjeeling_ctor (void) __attribute__ ((constructor));\n"
-    "void darjeeling_ctor (void) {\n"
+    "void __attribute__ ((constructor)) darjeeling_ctor (void) {\n"
+    #"void darjeeling_ctor (void) {\n"
     "  struct sigaction new_action;\n"
     "  new_action.sa_handler = darjeeling_sighandler;\n"
     "  sigemptyset(&new_action.sa_mask);\n"
@@ -181,7 +181,7 @@ class GCovCollector(CoverageCollector):
         filename_absolute = os.path.join(source_directory, filename_relative)
         return filename_absolute in self._source_filenames
 
-    # FIXME is this a general solution?
+    # FIXME is this a general solution? nope, not a general solution
     def _resolve_filepath(self, filename_relative: str) -> str:
         if not filename_relative:
             raise ValueError('failed to resolve path')
@@ -191,6 +191,10 @@ class GCovCollector(CoverageCollector):
         filename_relative_child = '/'.join(filename_relative.split('/')[1:])
         return self._resolve_filepath(filename_relative_child)
 
+    def _resolve_filepath_pdr(self, base_filename: str) -> str:
+        similar=[x for x in self._source_filenames if x.endswith(base_filename)]
+        return similar[-1].lstrip(self._source_directory)
+
     def _parse_xml_report(self, root: ET.Element) -> FileLineSet:
         packages_node = root.find('packages')
         assert packages_node
@@ -202,7 +206,7 @@ class GCovCollector(CoverageCollector):
             filename = node.attrib['filename']
             try:
                 filename_original = filename
-                filename = self._resolve_filepath(filename)
+                filename = self._resolve_filepath_pdr(filename)
                 logger.trace(f"resolving path '{filename_original}' "
                              f"-> '{filename}'")
             except ValueError:
diff --git a/src/darjeeling/localization.py b/src/darjeeling/localization.py
index 5823b6c..bec124a 100644
--- a/src/darjeeling/localization.py
+++ b/src/darjeeling/localization.py
@@ -142,6 +142,7 @@ class Localization:
             m = f"suspiciousness metric not supported: {cfg.metric}"
             raise BadConfigurationException(m)
         logger.info(f"using suspiciousness metric: {cfg.metric}")
+        logger.info(f"coverage: {str(coverage)}")
 
         loc = Localization.from_coverage(coverage, metric)
         loc = loc.exclude_files(cfg.exclude_files)
