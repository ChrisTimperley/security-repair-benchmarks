#!/bin/bash
set -eu

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
SOURCE_DIR="${HERE_DIR}/source"
BUILD_DIR="${SOURCE_DIR}/build"
BUG_FILE="${HERE_DIR}/bug.json"

if [[ "${REPAIR_TOOL}" == "extractfix" ]]; then
  COMPILE_TYPE="$1"
  BUILD_DIR="${SOURCE_DIR}/klee"
  KLEE_LIB_DIR="${SOURCE_DIR}/../project_specific_lib/"
  export CFLAGS="-g -D__NO_STRING_INLINES  -D_FORTIFY_SOURCE=0 -U__OPTIMIZE__ -lkleeRuntest -lkleeBasic -I"${KLEE_LIB_DIR}" -L"${KLEE_LIB_DIR}" -lhook -Wno-everything ${CFLAGS:-}"

  if [[ "${COMPILE_TYPE}" == "to_bc" ]]; then
    export LLVM_COMPILER=clang
    export CC=wllvm
  elif [[ "${COMPILE_TYPE}" == "lowfat" ]]; then
    LOWFAT_CFLAGS="$(jq -r ".options.extractfix.lowfat.CFLAGS" "${BUG_FILE}")"
    export CC="${LOWFAT_CLANG}"
    export CFLAGS="${CFLAGS} ${LOWFAT_CFLAGS}"
  fi
fi

# destroy, recreate, and enter the build directory
rm -rf "${BUILD_DIR}"
mkdir "${BUILD_DIR}"
pushd "${BUILD_DIR}"

# prefer cmake if it's supported
if [[ -f "${SOURCE_DIR}/CMakeLists.txt" ]]; then
  cmake ..
else
  ../configure
fi
