#!/usr/bin/env python3
import argparse
import functools
import json
import os
import subprocess
import typing as t

REPAIR_TOOLS = (
    'extractfix',
    'fix2fit',
    'hifix',
)

_KLEE_DRIVER_TEXT = """
#!/bin/bash
message="error arg num in klee-driver"

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PATH_DRIVER="${HERE_DIR}/driver"

# binary name
if [[ $# > 0 ]]; then
    binary="$1"
    shift
else
    echo "$message"
    exit 1
fi

# test input
if [[ $# > 0 ]]; then
    test="$1"
    shift
else
    echo "$message"
    exit 1
fi

# crash line
if [[ $# > 0 ]]; then
    crash_line="$1"
    shift
else
    echo "$message"
    exit 1
fi


# fix line option
if [[ $# > 0 ]]; then
    fix_line_op="--fix-line=$1"
    shift
fi

export TEST_EXECUTION_PREFIX="klee --libc=uclibc --posix-runtime --crash-line=${crash_line} ${fix_line_op}"
"${PATH_DRIVER}" "${binary}"
""".strip()

_EXTRACTFIX_CONFIG_TEXT = """
#!/bin/bash
set -eu

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PATH_PREBUILD="${HERE_DIR}/prebuild"
BUG_FILE="${HERE_DIR}/bug.json"
PREPARE_CODE_PATH="${HERE_DIR}/prepare-source-for-extractfix"
KLEE_LIB_DIR="${HERE_DIR}/project_specific_lib/"
COMPILE_TYPE="$1"

if [ -f "${PREPARE_CODE_PATH}" ]; then
  ${PREPARE_CODE_PATH}
fi

export CFLAGS="-g -D__NO_STRING_INLINES  -D_FORTIFY_SOURCE=0 -U__OPTIMIZE__ -lkleeRuntest -lkleeBasic -Wno-everything ${CFLAGS:-}"

if [ -d "${KLEE_LIB_DIR}" ]; then
    export CFLAGS="-I"${KLEE_LIB_DIR}" -L"${KLEE_LIB_DIR}" -lhook ${CFLAGS}"
fi

if [[ "${COMPILE_TYPE}" == "to_bc" ]]; then
    export LLVM_COMPILER=clang
    export CC=wllvm
elif [[ "${COMPILE_TYPE}" == "lowfat" ]]; then
    LOWFAT_CFLAGS="$(jq -r ".options.extractfix.lowfat.CFLAGS" "${BUG_FILE}")"
    export CC="${LOWFAT_CLANG}"
    export CFLAGS="${CFLAGS} ${LOWFAT_CFLAGS}"
fi

"${PATH_PREBUILD}" "${COMPILE_TYPE}"
""".strip()

_EXTRACTFIX_COMPILE_TEXT = """
#!/bin/bash
set -eu

HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PATH_BUILD="${HERE_DIR}/build"
PROJECT_DIR="${HERE_DIR}/project"
BUILD_DIR="${PROJECT_DIR}/klee"
COMPILE_TYPE="$1"

BUG_FILE="${HERE_DIR}/bug.json"
SUBJECT_PATH="$(jq -r ".options.extractfix.binary.path" "${BUG_FILE}")"

export LLVM_COMPILER=clang

"${PATH_BUILD}" "${COMPILE_TYPE}"

# copy target binary to root directory
cp "${BUILD_DIR}/${SUBJECT_PATH}" "${PROJECT_DIR}"

# copy target bitcode to root directory if appropriate
if [[ "${COMPILE_TYPE}" == "to_bc" ]]; then
    pushd "${BUILD_DIR}"
    extract-bc -l llvm-link "${SUBJECT}"
fi
""".strip()


def generic_sanity_check(bug_dir: str) -> None:
    """
    Performs general sanity checking of a scenario contained within a given
    bug directory.

    Raises
    ------
    ValueError
        If the given scenario fails the sanity check.
    """
    if not os.path.isdir(bug_dir):
        message = "bug scenario directory not found: {}".format(bug_dir)
        raise ValueError(message)

    path_in_bug_dir = functools.partial(os.path.join, bug_dir)
    expected_files = (
        "bug.json",
        "build",
        "prebuild",
        "recompile",
        "source",
        "test",
    )

    for filename in expected_files:
        if not os.path.exists(path_in_bug_dir(filename)):
            message = "bug scenario [{}] missing required file: {}"
            message = message.format(os.path.abspath(bug_dir), filename)
            raise ValueError(message)


def extractfix_sanity_check(bug_dir: str, bug_json: t.Dict[str, t.Any]) -> None:
    generic_sanity_check(bug_dir)

    if "options" not in bug_json:
        raise ValueError('missing "options" section in bug.json')
    if "extractfix" not in bug_json["options"]:
        raise ValueError('missing "options.extractfix" section in bug.json')

    options = bug_json["options"]["extractfix"]

    if "bug-type" not in options:
        raise ValueError('missing "options.extractfix.bug-type" field in bug.json')

    if "binary" not in options:
        raise ValueError('missing "options.extractfix.binary" section in bug.json')
    if "name" not in options["binary"]:
        raise ValueError('missing "options.extractfix.binary.name" field in bug.json')
    if "path" not in options["binary"]:
        raise ValueError('missing "options.extractfix.binary.path" field in bug.json')

    if "lowfat" not in options:
        raise ValueError('missing "options.extractfix.lowfat" section in bug.json')
    if "CFLAGS" not in options["lowfat"]:
        raise ValueError('missing "options.extractfix.lowfat.CFLAGS" field in bug.json')


def prepare_for_extractfix(bug_dir: str, bug_json: t.Dict[str, t.Any]) -> None:
    path_in_bug_dir = functools.partial(os.path.join, bug_dir)

    if not os.path.exists(path_in_bug_dir("project")):
        os.symlink(path_in_bug_dir("source"), path_in_bug_dir("project"))

    path_config = path_in_bug_dir("project_config.sh")
    with open(path_config, "w") as f:
        f.write(_EXTRACTFIX_CONFIG_TEXT)
    os.chmod(path_config, 0o775)

    path_build = path_in_bug_dir("project_build.sh")
    with open(path_build, "w") as f:
        f.write(_EXTRACTFIX_COMPILE_TEXT)
    os.chmod(path_build, 0o775)

    if not os.path.exists(path_in_bug_dir("project_compile.sh")):
        os.symlink(path_in_bug_dir("recompile"), path_in_bug_dir("project_compile.sh"))

    path_driver = path_in_bug_dir("driver")
    with open(path_driver, "w") as f:
        f.write("#!/bin/bash\n")
        f.write('HERE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )\n')
        f.write('PATH_TEST="${HERE_DIR}/test"\n')
        f.write('PATH_BINARY="$1"\n')
        f.write('${PATH_TEST} "${PATH_BINARY}" || exit 0\n')
    os.chmod(path_driver, 0o775)

    path_klee_driver = path_in_bug_dir("klee-driver")
    with open(path_klee_driver, "w") as f:
        f.write(_KLEE_DRIVER_TEXT)
    os.chmod(path_klee_driver, 0o775)


def repair_with_extractfix(bug_dir: str, bug_json: t.Dict[str, t.Any]) -> None:
    extractfix_sanity_check(bug_dir, bug_json)
    prepare_for_extractfix(bug_dir, bug_json)

    # TODO prepare results directory

    command = " ".join([
        "/opt/extractfix/bin/extractfix",
        "-v",
        "-s",
        bug_dir,
        "-t",
        "exploit",
        "-c",
        "driver",
        "-b",
        bug_json["options"]["extractfix"]["bug-type"],
        "-n",
        bug_json["options"]["extractfix"]["binary"]["name"],
    ])
    subprocess.check_call(command, shell=True)


def repair_with_hifix(bug_dir: str, bug_json: t.Dict[str, t.Any]) -> None:
    command = "/opt/hifix/bin/hifix {}".format(bug_dir)
    subprocess.check_call(command, shell=True)


def load_bug_info(bug_dir: str) -> t.Dict[str, t.Any]:
    bug_info_filename = os.path.join(bug_dir, "bug.json")
    try:
        with open(bug_info_filename, "r") as f:
            return json.load(f)
    except FileNotFoundError as err:
        raise ValueError("bug directory does not contain bug.json")


def repair(bug_dir: str, tool: str) -> None:
    bug_info = load_bug_info(bug_dir)

    if tool == "extractfix":
        return repair_with_extractfix(bug_dir, bug_info)
    elif tool == "hifix":
        return repair_with_hifix(bug_dir, bug_info)
    else:
        raise ValueError("unrecognized repair tool")


def repair_command(args: argparse.Namespace) -> None:
    repair(args.bug, args.tool)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        "Provides helpful utilities for performing APR experiments.",
    )
    subparsers = parser.add_subparsers()

    parser_repair = subparsers.add_parser(
        "repair",
        help="Evaluates a given repair tool on a bug scenario.",
    )
    parser_repair.add_argument(
        "tool",
        help="the name of the repair tool that should be used",
    )
    parser_repair.add_argument(
        "bug",
        help="the directory of the bug scenario",
    )
    parser_repair.set_defaults(func=repair_command)

    args = parser.parse_args()
    if "func" in args:
        args.func(args)
